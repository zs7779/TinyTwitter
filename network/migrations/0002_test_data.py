# Generated by Django 3.1.1 on 2020-11-02 22:52

from django.db import migrations
from django.contrib.auth.hashers import make_password
import json
import random

from ..utils import isHashTag, isMention


def load_testdata(apps, schema_editor):
    random.seed(123)
    # decide if post is repost/comment, <0.2 is original, > 0.5 is comment, middle is repost
    post_rand = [random.random() for i in range(500)]
    # 1st post cannot repost
    post_rand[0] = 0
    # decide parent in case of repost/comment
    parent = [random.randrange(i//2, i) if i > 0 else 0 for i in range(500)]
    
    # <0.3 has pic
    posts_with_pics = [random.random() for i in range(500)]

    mentions = [random.randrange(-10, 10) for _ in range(500)]
    tags = [random.randrange(-5, 5) for _ in range(500)]

    # remember root as data populate
    root = []
    for i in range(500):
        is_comment = True if post_rand[i] > 0.5 else False
        if is_comment:
            if post_rand[parent[i]] > 0.5:
                root.append(root[parent[i]])
            else:
                root.append(parent[i])
        else:
            root.append(i)

    # Get model from app
    User = apps.get_model('network', 'User')
    Follow = apps.get_model('network', 'Follow')
    Post = apps.get_model('network', 'Post')
    Media = apps.get_model('network', 'Media')
    Like = apps.get_model('network', 'Like')
    HashTag = apps.get_model('network', 'HashTag')
    PostTag = apps.get_model('network', 'PostTag')
    Mention = apps.get_model('network', 'Mention')
    
    # Load test data generated by Mockaroo
    users = json.load(open('network/testdata/users.json'))
    posts = json.load(open('network/testdata/posts.json'))

    # Some hashtags
    hashtags = ['HelloWorld', 'HolaMundo', 'BonjourLeMonde', 'KonnichiwaSekai', 'NihaoShijie']

    for u in users:
        User.objects.create(username=u['username'],
                            email=u['email'],
                            password=make_password(u['password']),
                            bio=u['bio'][:140],
                            avatar_url=u['avatar'])

    for i, p in enumerate(posts):
        user = User.objects.get(id=int(p['author'])+1)
        is_comment = True if post_rand[i] > 0.5 else False
        parent_post = None if post_rand[i] < 0.2 else Post.objects.get(id=parent[i]+1)
        root_post = None

        if is_comment:
            if post_rand[parent[i]] > 0.5:
                root_post = Post.objects.get(id=root[parent[i]]+1)
            else:
                root_post = Post.objects.get(id=parent[i]+1)

        # Randomly insert Mention and Hashtag
        post_text = p['text'][:140]
        if len(post_text) <= 120:
            text_split = post_text.split(' ')
            if mentions[i] >= 0:
                text_split.insert(random.randrange(len(text_split)), f'@{users[mentions[i]]["username"]}')
            if tags[i] >= 0:
                text_split.insert(random.randrange(len(text_split)), f'#{hashtags[tags[i]]}')
            post_text = ' '.join(text_split)

        post = Post(author=user, text=post_text,
                    parent=parent_post,
                    is_comment=is_comment,
                    root_post=root_post)
        post.save()

        # Randomly add pic to posts
        if posts_with_pics[i] < 0.2:
            media = Media(user=user, post=post, media_url=user.avatar_url, media_type='IMG')
            media.save()

        # Create the actual Mention and Hashtag relations
        words = post_text.split()
        for t in set(filter(isHashTag, words)):
            try:
                hashtag = HashTag.objects.get(text=t[1:].lower())
            except HashTag.DoesNotExist:
                hashtag = HashTag(text=t[1:].lower())
                hashtag.save()
            tag = PostTag(tag=hashtag, post=post)
            tag.save()
        for m in set(filter(isMention, words)):
            try:
                mentioned = User.objects.get(username=m[1:])
            except User.DoesNotExist:
                continue
            mention = Mention(user=mentioned, post=post)
            mention.save()

    # Random likes
    user_objects = User.objects.all()
    post_objects = Post.objects.all()
    for _ in range(2000):
        Like.objects.get_or_create(post=random.choice(post_objects), \
                                   user=random.choice(user_objects))

    # Random follows
    for _ in range(50):
        user1 = random.choice(user_objects)
        user2 = random.choice(user_objects)
        if user1 != user2:
            Follow.objects.get_or_create(user=user1, follower=user2)


class Migration(migrations.Migration):

    dependencies = [
        ('network', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_testdata),
    ]
